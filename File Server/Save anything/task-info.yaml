type: edu
files:
- name: src/server/Main.java
  visible: true
  text: "package server;\nimport java.util.*;\n\npublic class Main {\n    static List<String>\
    \ files = new ArrayList<>();\n    \n    public static void main(String[] args)\
    \ {\n       \n        Scanner sc = new Scanner(System.in); \n        boolean exit\
    \ = false;\n        String[] input;\n        \n        while (!exit) {\n     \
    \       input = parseInput(sc.nextLine());\n            String command = input[0];\n\
    \            \n            if (command.equals(\"exit\")) {\n                exit\
    \ = true;\n            } else {\n                String fileName = input[1];\n\
    \                \n                if (command.equals(\"add\")) {\n          \
    \          addFile(fileName);\n                } else if (command.equals(\"get\"\
    )) {\n                    getFile(fileName);\n                } else if (command.equals(\"\
    delete\")) {\n                    deleteFile(fileName);\n                }\n \
    \           }\n            \n        }\n        \n    }\n    \n    private static\
    \ String[] parseInput(String str) {\n        return str.split(\" \");\n    }\n\
    \    \n    private static void addFile(String fileName) {\n        if (files.contains(fileName)\
    \ || !checkFileName(fileName)) {\n            System.out.println(String.format(\"\
    Cannot add the file %s\", fileName));\n        } else {\n            files.add(fileName);\n\
    \            System.out.println(String.format(\"The file %s added successfully\"\
    , fileName));\n        }\n    }\n    \n    private static void getFile(String\
    \ fileName) {\n        if (files.contains(fileName)) {\n            System.out.println(String.format(\"\
    The file %s was sent\", fileName));\n        } else {\n            System.out.println(String.format(\"\
    The file %s not found\", fileName));\n        }\n    }\n    \n    private static\
    \ void deleteFile(String fileName) {\n        if (files.contains(fileName)) {\n\
    \            System.out.println(String.format(\"The file %s was deleted\", fileName));\n\
    \            files.remove(fileName);\n        } else {\n            System.out.println(String.format(\"\
    The file %s not found\", fileName));\n\n        }\n    }\n    \n    private static\
    \ boolean checkFileName(String fileName) {\n        try {\n            int number\
    \ = Integer.parseInt(String.valueOf(fileName.substring(4)));\n            \n \
    \           return fileName.startsWith(\"file\") && number >= 1 && number <= 10;\n\
    \        } catch (Exception e) {\n            return false;\n        }\n    }\n\
    }"
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.net.ConnectException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class FileServerTest extends StageTest<String> {

        private static final String onConnectExceptionMessage = "A client can't connect to the server!\n" +
            "Make sure the server handles connections and doesn't stop after one client connected.";

        public static final String serverDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

        public static final String clientDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "client" + File.separator + "data" + File.separator;

        private static String id;

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkServerStop),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkPaths),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testSaveAndGet),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testGetAfterServerRestart),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testDeleteFiles)
            );
        }

        // Test #1. Check if server stops
        CheckResult checkServerStop() {

            TestedProgram server = getServer();
            TestedProgram client;

            server.startInBackground();

            client = getClient();
            client.start();
            client.execute("exit");

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                return CheckResult.wrong("You should stop the server if a client sends 'exit'");
            }

            return CheckResult.correct();
        }

        CheckResult checkPaths() {
            // Test #2. Check folders with data
            if (!Files.exists(Paths.get(serverDataPath)) || !Files.isDirectory(Paths.get(serverDataPath))) {
                return CheckResult.wrong("Can't find '/server/data' folder. You should store all saved files in it!\n" +
                    "The folder should be created even if the server wasn't started!");
            }

            if (!Files.exists(Paths.get(clientDataPath)) || !Files.isDirectory(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find '/client/data' folder. You should store all files you want to " +
                    "store on the server in it!\n" +
                    "The folder should be created even if the client wasn't started!");
            }
            return CheckResult.correct();
        }


        CheckResult testSaveAndGet() {

            TestedProgram server;
            TestedProgram client;

            Utils.createFiles(clientDataPath);

            // Test #3. Check saving file on the server
            server = getServer();
            server.startInBackground();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeAdding = Utils.numExistingFiles(folder);

            client = getClient();
            client.start();
            client.execute("2\ntest_purpose_test1.txt");
            String clientOutput = client.execute("");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            id = Utils.findId(clientOutput);

            int numOfFilesAfterAdding = Utils.numExistingFiles(folder);

            if (numOfFilesAfterAdding == numOfFilesBeforeAdding) {
                return CheckResult.wrong("Once a client saved a file on the server number of files in /server/data/ should be changed!");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("2\ntest_purpose_test2.txt\ntest_purpose_newFile.txt");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            if (!Utils.isServerFileExists("test_purpose_newFile.txt")) {
                return CheckResult.wrong("Can't find a file after saving on the server." +
                    "You should save client's files in /server/data/ folder!");
            }

            String savedFileContent = Utils.getServerFileContent("test_purpose_newFile.txt");

            if (!savedFileContent.equals("test2")) {
                return CheckResult.wrong("A file after saving has wrong content!");
            }

            // Test #4. Check getting files
            client = getClient();
            client.start();
            clientOutput = client.execute("1\n1\ntest_purpose_notExist.txt");

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by name that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("1\n2\n" + (id + "511"));

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by ID that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get.txt");

            if (!Utils.isClientFileExists("test_purpose_get.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByNameFileContent = Utils.getClientFileContent("test_purpose_get.txt");
            if (!downloadedByNameFileContent.equals("test2")) {
                return CheckResult.wrong("After getting a file from the server by name it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_id.txt");

            if (!Utils.isClientFileExists("test_purpose_get_id.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByIdFileContent = Utils.getClientFileContent("test_purpose_get_id.txt");
            if (!downloadedByIdFileContent.equals("test1")) {
                return CheckResult.wrong("After getting a file from the server by ID it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testGetAfterServerRestart() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            server.startInBackground();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_by_id_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_by_id_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testDeleteFiles() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeDeleting = Utils.numExistingFiles(folder);

            server.startInBackground();
            client.start();
            client.execute("3\n1\ntest_purpose_newFile.txt");

            sleep(2000);
            int numOfFilesAfterDeletingByName = Utils.numExistingFiles(folder);
            if (numOfFilesBeforeDeleting == numOfFilesAfterDeletingByName) {
                return CheckResult.wrong("Once a client deleted a file by name from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("3\n2\n" + id);

            sleep(2000);
            int numOfFilesAfterDeletingById = Utils.numExistingFiles(folder);
            if (numOfFilesAfterDeletingByName == numOfFilesAfterDeletingById) {
                return CheckResult.wrong("Once a client deleted a file by ID from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTestDeleteFiles() {
            Utils.deleteTestFiles();
        }

        public static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        public static TestedProgram getServer() {
            return new TestedProgram("server");
        }
    }


  learner_created: false
- name: src/client/Main.java
  visible: true
  text: |-
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            final String SERVER_ADDRESS = "127.0.0.1";
            final int PORT = 12345;
            Scanner sc = new Scanner(System.in);


                System.out.println("Client started!");

                try (
                        Socket socket = new Socket(SERVER_ADDRESS, PORT);
                        DataInputStream input = new DataInputStream(socket.getInputStream());
                        DataOutputStream output = new DataOutputStream(socket.getOutputStream());
                ) {
                    System.out.println("Enter action (1 - get a file, 2 - create a file, 3 - delete a file): ");
                    StringBuilder request = new StringBuilder();
                    String userInput = sc.nextLine();

                    if (userInput.equals("exit")) {
                        output.writeUTF("exit");
                    } else {
                        String action = userInput.equals("1") ? "get" : userInput.equals("2") ? "create" : "delete";
                        request.append(action);

                        // asking for the fileName
                        System.out.println("Enter filename: ");
                        String fileName = sc.nextLine();
                        request.append(",").append(fileName);

                        // ask for the content if the user wants to create a file
                        if (action.equals("create")) {
                            System.out.println("Enter file content: ");
                            String content = sc.nextLine();
                            request.append(",").append(content);
                        }

                        // send request to server
                        output.writeUTF(request.toString());
                        System.out.println("The request was sent.");

                        // receive response from server
                        String response = parseServerResponse(input.readUTF(), action);
                        System.out.println(response);
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }


        }

        private static String parseServerResponse(String serverResponse, String action) {
            int statusCode = Integer.parseInt(serverResponse.substring(0, 3));
            String response = "";

            if (statusCode == 200) {
                if (action.equals("get")) {
                    String content = serverResponse.substring(4); // index [0-2] is the status code, index 3 is space, the content starts from index 4
                    response = String.format("The content of the file is: %s", content);
                } else if (action.equals("create")) {
                    response = "The response says that the file was created!";
                } else if (action.equals("delete")) {
                    response = "response says that the file was successfully deleted!";
                }
            } else if (statusCode == 403) {
                response = "The response says that creating the file was forbidden!";
            } else if (statusCode == 404) {
                response = "The response says that the file was not found!";
            }

            return response;
        }
    }
  learner_created: true
- name: test/Utils.java
  visible: false
  text: |+
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Utils {
        public static String findId(String output) {
            Pattern pattern = Pattern.compile("ID = (\\d+)");
            Matcher matcher = pattern.matcher(output);

            if (matcher.find()) {
                int count = matcher.groupCount();
                if (count != 1) {
                    throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
                }
                return matcher.group(1);
            } else {
                throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
            }
        }

        public static void deleteTestFiles() {
            File dir = new File(FileServerTest.serverDataPath);

            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe they are not closed!");
                        }
                    }
                }
            }

            File cdir = new File(FileServerTest.clientDataPath);
            files = cdir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe their input streams are not closed!");
                        }
                    }
                }
            }
        }

        public static void createFiles(String clientDataPath) {

            for (int i = 0; i < 2; i++) {
                try {
                    File file = new File(clientDataPath + String.format("test_purpose_test%d.txt", i + 1));
                    if (!file.exists()) file.createNewFile();
                    FileWriter writer = new FileWriter(file, false);
                    writer.write(String.format("test%d", i + 1));
                    writer.close();
                } catch (IOException e) {
                    throw new RuntimeException("Can't create test files!");
                }

            }
        }

        public static int numExistingFiles(File file) {
            File[] files = file.listFiles();
            if (files == null) {
                return 0;
            }
            return (int) Arrays.stream(files).filter(File::exists).count();
        }

        private static boolean isFileExists(String path) {
            return Files.exists(Paths.get(path)) && !Files.isDirectory(Paths.get(path));
        }

        public static boolean isClientFileExists(String fileName) {
            return isFileExists(FileServerTest.clientDataPath + fileName);
        }

        public static boolean isServerFileExists(String fileName) {
            return isFileExists(FileServerTest.serverDataPath + fileName);
        }

        public static String getServerFileContent(String fileName) {
            return getFileContent(FileServerTest.serverDataPath + fileName);
        }

        public static String getClientFileContent(String fileName) {
            return getFileContent(FileServerTest.clientDataPath + fileName);
        }

        private static String getFileContent(String fileName) {
            try {
                return new String(Files.readAllBytes(Paths.get(fileName)));
            } catch (IOException e) {
            }
            throw new WrongAnswer("Can't read files content.\n" +
                "Make sure you close input/output streams after reading or writing files!");
        }

    }


  learner_created: false
- name: src/server/Session.java
  visible: true
  learner_created: true
- name: src/client/data/good.txt
  visible: true
  learner_created: true
- name: src/client/data/qs44.txt
  visible: true
  learner_created: true
- name: src/client/data/ss3.txt
  visible: true
  learner_created: true
- name: src/client/data/sss.txt
  visible: true
  learner_created: true
- name: src/client/data/sssss.txt
  visible: true
  learner_created: true
- name: src/client/data/asd.txt
  visible: true
  learner_created: true
- name: src/client/data/HIHI.txt
  visible: true
  learner_created: true
- name: src/client/data/hia.txt
  visible: true
  learner_created: true
- name: src/client/data/ggasd.txt
  visible: true
  learner_created: true
- name: src/client/data/loasd
  visible: true
  learner_created: true
- name: src/client/data/gooasd.txt
  visible: true
  learner_created: true
- name: src/server/data/QeUD9dwQSfB1.txt
  visible: true
  learner_created: true
- name: src/server/map.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5428#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 19 Feb 2022 13:44:19 UTC
record: -1
